
1. How did viewing a diff between two versions of a file help you see the bug that was introduced?

Well, I didn't use the diff tool from command line before. It is really neat, and for some particular
use cases , such as small files or not so dificult code logic to understand, it's even nicer than
what IntelliJ Idea offers.

It is pretty easy to see differences between files.

Bottom line:
       diff -u file1 file2

2. How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Well, the first thing I can think of is searching through the history and understand the patterns that I use
when programming.

Secondly, if I use proper commit messages, then I can easily understand why some change happened and how did I
handled it.

Bottom line:
       git diff commitID1 commitID2 --stat

Remark:
	A good rule of thumb is to make one commit per logical change. For example, if you fixed a typo,
then fixed a bug in a separate part of the file, you should use one commit for each change since they are
logically separate. If you do this, each commit will have one purpose that can be easily understood.
Git allows you to write a short message explaining what was changed in each commit, and that message will
be more useful if each commit has a single logical change.

3. What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git,
vs having versions automatically saved, like Google docs does?

Pros
	- you can adjust the granularity of each commit
	- you make sure that the code compiles
	- you get to add your message

Cons
	- you might lose your work if you don't commit often
	- you might not recover easily from some commits if you don't have a proper granularity


Bottom line:
       git log --stat


4. Why do you think some version control systems, like Git, allow saving multiple files in one commit,
while others, like Google Docs, treat each file separately?

Because of semantics: in git you would like to track a software's evolution, so you need to track
all of it's source code files and in GDrive you would like to track every document separately because
you would like to see changes that happend only to that particular document at a moment in time

5. How can you use the commands git log and git diff to view the history of files?

   The git log and diff commands are useful for searching for a particular commit at see what
changes occurred in the code base.
   You can also look for changes between the current version and some old version and see how to system
evolved overall.
   Helps you understand what other contributors have done.

6. How might using version control make you more confident to make changes that could break something?

   Because of the git log, and the fact that you can always checkout a commit made before, so you
can easily use that snapshot of the system for testing it and comparing it with other versions
=> exploration

Bottom line:
       git checkout commitID
       git rebase master

7. Now that you have your workspace set up, what do you want to try using Git for?

   I would like to track all my homeworks and study lectures with git.
   Even my personal collection of e- books.
   All research documents should be versioned with git.
   Start use readme files.
