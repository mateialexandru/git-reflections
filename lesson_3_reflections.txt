Bottom line:  
       git branch : view/ create branch
       git remote : view/ craeate remote
       git remote add "remoteName" "remoteUrl" : most common remote name is origin 
       git remote -v : show info on the remote (verbose)
       git push "remote" "branch" 

1. When would you want to use a remote repository rather than keeping all your work local?

   * when I am confident that my work done so far can be shared we others
   * when I want to have an online backup of my repository that I can access from any PC
   * when I want to collaborate with others on the project

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

   I want to have control full control over what I am working on, on my local repository (I see it sort of like working on a different branch).
   Only after finishing my task I can then pull changes from the remote repository and fix any conflicts that might appear (same as
   merging one branch into another, just that they are in different locations, one on my PC, another online).

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

   Fork - clone of one repository to another repository on github
   Clone - copy of one repository to another repository
   Branch - Tags on commits that makes it easier to organize your repository; every branch keeps a HEAD which
   reffers to the latest commit on that branch

Bottom line:

       * When you connect to a remote repository you get extra branches for every branch on the remote repository i.e.
       origin/master , origin/exp, origin/dev
       * If you use git pull then what happens is that you update the origin/branchName on your local repo and also
       merge your local branch (branchName) with the origin/branchName so they both point to the same commit 
       * You can only update origin/* branches locally by using git fetch

4. What is the benefit of having a copy of the last known state of the remote stored locally?

   You have more control on the merging process when it comes to syncing both the remote repository and your local one.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

   It would be harder, since all versions should have been saved into archives, most probably. So every collaborator should
   send a zip file of their work to the techincal lead. Only then he would need to use
   diff tool to see changes between versions and modify each modified document accordingly.

   Plus, you will loose the history of changes that ocurred in the project.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

   * when collaborataing with another person
   * when the master branch is regarded as the production branch where everything should work
   * when there is a project lead that has to make sure the changes are proper implemented and that more bugs aren't introduced
   * when there is a QA team maybe

   The benefit is that you can vizualize better the changes that occured in the product (by watching the master commit log) and
   that you can assign the task of checking the changes and merging them to a specific person, that can then decide to add
   them to the master or not.
   
   This is how collaboration in open source projects works, one being the responsible for the project and taking care of all
   the pull requests that come from collaborators. If he decides the pull request benefits the project, he can than merge it in
   the master and so the codebase improves.
   
